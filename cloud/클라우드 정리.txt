ppt1
10페이지 클라우드 컴퓨팅 이점
(Agility-민첩, Elastic-탄력성, Coast Saving - 비용절감, 손쉬운 글로벌 서비스, 예상치 못한 트래픽 폭주 대응, 빅데이터&인공지능 서비스 확장)

12페이지 ~ 15페이지 뭔지 다 파악
IaaS - 서버, 스토리지, 네트워크, 가상화 제공 / 사용자가 OS및 애플리케이션 관리 - (Ex. ec2, s3, vpc, EBS)
PaaS - 개발 및 배포를 위한 플랫폼(IaaS+운영체제+미들웨어+런타임) 제공 / 서버 및 OS 관리 불필요
SaaS - 사용자가 소프트웨어를 설치 없이 이용(PaaS+데이터+어플리케이션) / 유지보수 및 업데이트 제공자가 수행

ppt2
2~3페이지
aws핵심 서비스 개요
[컴퓨팅 서비스]
ec2 - 가상서버, 온디맨드/ 스팟 인스터스
Lamda - 서버리스 컴퓨팅, 이벤트 기반 실행
[스토리지 서비스]
s3 - 객체 스토리지, 정적 웹 호스팅
EBS - ec2 인스턴스를 위한 블록 스토리지
[네트워크 및 콘텐츠 전송]
vpc - aws내 네트워크 구성
Route 53 - 도메인 네임 서비스
CloudFront - CDN(콘텐츠 전송 네트워크)
[데이터베이스]
RDS - 관리형 데이터베이스(MySQL, PostgreSQL, MariaDB)
DynamoDB - NoSQL(비관계형), 키-값 저장소
[보안 및 접근관리]
IAM - 사용자 및 권한 관리
보안그룹 - 인바운드 및 아웃바운드 트래픽 제어

5페이지
리전 - 가장 큰 단위(나라), 리전 안에 다양한 가용영역이 존재
리전 선택시 고려할 점 - 지연속도(가까운 리전), 법률(개인정보 등), 사용가능한 AWS서비스(나라별로 런칭이 다름)
(최초 리전 - us-east-1)

가용영역 - 하나의 리전은 2개 이상의 가용영역으로 구성
AZ라고도 불림, 1개 이상의 물리 데이터 센터를 묶은 논리적 데이터 센터
가용영역 구성 - 1개 이상 데이터 센터 구성, 매우빠른 전용 네트워크로 구성, *반드시 물리적으로 일정거리 떨어져있음, 100km이내 거리에 위치, 재해로 인한 대비 및 보안

글로벌 서비스 - 데이터 및 서비스를 전 세계의 모든 인프라가 공유 (ex. IAM, Route53, WAF, Biling)
지역 서비스 - 특정 리전을 기반으로 데이터 및 서비를 제공, 대부분 지역 서비스 (ex. ec2, s3, RDS)

21페이지
IAM - aws 리소스에 대한 접근을 안전하게 제어하는 서비스
   누가(aws사용자) 어떤 aws서비스에 어떤 권한으로 접근할 수 있는지를 관리하는 역할
IAM요소 - 사용자(개별계정), 그룹(여러 사용자에게 동일한 권한 부여), 역할role(특정 권한을 임시적으로 부여(위임도 가능)),
      정책 (JSON형식으로 작성된 접근 권한 규칙(ex. s3에서 썻던거)),mfa
*MFA - 다중 인증으로 보안 강화

IAM의 주요기능 - aws 리소스 접근 제어, 정책 기반 접근 관리, IAM역할(role) 및 서비스 연동, MFA 적용가능, aws 루트 계정 보호


클라우드 컴퓨팅 이점
특징
민첩, 탄력성, 비용절감, 손쉬운 글로벌 서비스, 예상치 못한 트래픽 폭주 대응, 빅데이터 & 인공지능 서비스 확장

IaaS -> 서버 스토리지, 네트워크, 가상화 제공/ 사용자가 os및 애플리케이션 관리 - (예: EC2, S3, VPC, EBS)

PaaS -> 개발 및 배포를 위한 플랫폼 제공/ 서버 및 OS 관리 불필요
IasS+ 운영체제, 미들웨어, 런타임-
Saas -> 사용자가 소프트웨어를 설치 없이 이용 / 유지보수 및 업데이트 제공자가 수행
PasS + 데이터, 에플리케이션








3장
EC2 모니터링
슈퍼 유저로 변경 : sudo su-
http 데몬 설치: yum install httpd -y
http데몬 실행: systemctl start httpd
index.html 만들기: cd /var/www/html/, vi index.html

Cloud Watch
경보 생성 클릭 -> 지표 선택 -> CPUUtilization -> 인스턴스별 지표 -> 나의 인스턴스 체크 -> 옵션 탭 -> 누적면적
-> 지표 선택 클릭

자동 모니터링
기간 : 1분 -> 임계값 : 30 -> 추가구성 펼치기 -> 누락된 데이터 처리 -> 다음 클릭

새 주제 생성 -> 새 주제 생성 이름 작성 -> 알림 수신한 이메일 작성 -> 주제 생성 -> ec2 작업 추가 -> 
경보 상태 ->

EC2 접근
Amazon Linux 리포지토리 package 활성화 : amazon-linux-extras install -y epel
CPU 부하 설정 툴 설치 : yum install -y stress-ng
CPU 부하 발생 : stress-ng --cpu 1 --timeout 10m --metrics --times

네트워크 경고 만들기
ec2 : sudo yum install -y iperf3
설치후, iperf3 -s & // 실행해서 서버 모드 활성화
iperf3 -s & sleep 2 && stress-ng --cpu 1 --timeout 10m --metrics -
times & iperf3 -c 127.0.0.1 -t 600 -b 100M // 네트워크 부하 발생
cloudwatch 지표:NetworkOut, 임계값: NetworkOut >= 20000
경보이름: High_Network_Alarm
ec2 재기동
이메일로알람오기


4장
S3
가장 오래되고기본이 되는 객체 스토리지 서비스
확장성, 내구성, 보안성이 뛰어난 객체 스토리지 서비스
11 9's 의 내구성 제공, 데이터 손실 최소화
데이터 저장 공간이 거의 무제한
전 세계 수백만 기업의 데이터를 저장하는 핵심 서비스

특징
객체 스토리지 서비스: 파일 저장 전용 ( EBS/EFS 등 블록 스토리지와 구분) -> 어플리케이션 설치 불가
글로벌 서비스 단위: 데이터는 특정 리전에 저장됨
무제한 용량 지원: 단일 객체는 0BYTES ~ 5tb 저장 가능
최소 3개 이상의 물리적으로 분리된 가용 영역에 데이터 복제
높은 내구성과 고가용성을 제공
OS 도움없이 객체별 접근 가능, 데이터 저장 및 활용이 용이

버킷과 객체
버킷
- S3에서 저장공간을 구분하는 단위 (디렉터리 개념)
- 전 세계 고유 이름을 가져야 함 -> 리전과 무관하게 중복 불가
- 한번 생성 시 , 이름 변경 불가

객체 : S3에 저장되는 기본 매체
- Owner: 소유자 정보
- key: 객체 이름 (경로 역할)
- Value: 파일 데이터 자체
- Version ID: 파일 버전 식별자 (버전 관리 활성화 시에만 생성됨)
- Metadata: 파일 관련 정보 (기본 메타데이터 외에 사용자 정의도 가능함)

S3의 내구성 & 가용성
내구성: 파일을 잃어버리지 않을 능력
가용성: 내가 원할 때 그 파일을 쓸 수 있는 능력
최소 3개 AZ에 중복 저장 (Standard 기준)
내구성: 99..999999999% -> 파일 손실 확률 극히 낮음
가용성 SLA: 99.9% 수준
SLA: Service Level Agreement, 즉 서비스 수준 협약
" 이 서비스를 얼마나 안정적으로 사용할 수 있는가"
99.95% : 1년 중 약 52분 이하의 다운타임
99,95% : 1년 중 약 1일 18시간 이하 다운

S3 보안
기본적으로 모든 객체는 Private(비공개) 상태로 생성됨
퍼블릭 접근은 명시적으로 허용해야함 (웹 호스팅 등)
Bucket Policy: 버킷 단위 정책
IAM 정책
Identity-based Policy ( 자격 증명 기반 정책)
	IAM 사용자, 그룹, 역할에부여하는정책
	"누가 무엇을 할 수 있는가:를 설정함
Resoure-based Policy (리소스 기반 정책)
	리소스(S3, SQS 등)에 직접 부여하는 정책
	이 리소스에 누가 접근 가능한가를 정의함
S3 버킷 정책
버킷 단위로 적용되는 리소스 기반 정책
언제, 어디서, 누가, 무엇을, 어떻게 할 수 있는지 정의
예시: arn:aws:s3:::my-bucket/images/* -> 해달 경로에 있는 모든 객체 대상으로 권한 설정
익명 사용자 또는 다른 계정에 대한 권한 부여도 가능

{
"Effect": "Allow",
"Principal": "*",
"Action": "s3GetObject",
"Resource": "arn:aws:s3:::demo.rwlecture.com/*"
}


S3 실습
index.html생성하고 사진도 버킷의 퍼블릭 엑세스를 허용한 S3에 넣는다.
객체 URL을 통해 접속한다.
들어가면 오류가 날 수 잇는데 버킷에 권한 탭 확인을 하여 버킷 정책이 없는 것을 확인한다.

"Version": "2012-10-17",
"Statement" :[
{
"Sid": "PublicWebsiteAllow",
"Effect": "Allow",
"Principal": "*",
"Action": "s3GetObject",
"Resource": "arn:aws:s3:::demo.rwlecture.com/*"
}
]

특정 IP
"Condition": {
	"IpAddress": {
		"aws:SourceIp": "123.123.123.123"
	}
}

폴더에 데이터는 업로드 하고 싶으나 다운로드를 제한하고 싶다.
"Effect": "Deny"
"Action": "s3:GetObject"

AWS CLI
Amazon web Services Command Line Interface
AWS 리소스 (S3, EC2, IAM 등)를 터미널이나 명령 프롬프트로 제어할 수 있는 도구
콘솔을 클릭하지 않고도 명령어만으로 S3 버킷 생성, 파일업로드, EC2 실핼 같은 작업가능

S3 CLI 
aws s3 ls : 버킷 목록 ㅘㄱ인
aws s3 ls s3 : 버킷이름  : 버킷 안에 파일 목록
aws s3 cp 로컬 경로 s3://버킷이름/경로 : 파일 업로드
aws s3 c s3://버킷이름/경로 로컬 경로 : 파일 다운로드
aws s3 cp s3://my-bucket/folder ./local-folder --recursive -> 다운로드
aws s3 cp ./local-folder s3://my-bucket/folder --recursive -> 업로드

Scaling(스케일링)이란?
- 애플리케이션 또는 시스템의 성능을높이기 위해컴퓨팅 리소스를 확장하거나 축소하는 것
- 요청이 많이질 때 처리할 수 있도록 서버를 키우는 것!!!!

스케일 업 (Scale- Up, Vertoca; Scaling)
- 서버 한대 성능 up 
	장점: 단순하고 설정이 쉬움
	단점: 물리적인 한계 존재 (더 이상 업그레이드 불가)
		재시작 필요성 있음
		하나의 서버에만 의존 -> 장애 발생 시 위험


스케일 아웃 (Scale-out, Horiuzontal Scaling)
- 서버를 여러 대로 늘려서 처리 성능을 확장하는 방식
	장점: 무중단 확장 가능!
	단점: 복잡한 아키텍쳐, Load Balancer (ELB) 등의 구성 필요
,
Auto Scaling
트래픽 상황에 맞춰 서버 수를 자동으로 늘리거나 줄여주는 aws 서비스
- 트래픽 증가 시 자동으로 이느터스 증가
- 사용량 감소시 자동으로 인스턴스 축소
- 리소스 비용 절감, 고가용성 유지 

구성 요소
Launch Template
- 새 인스턴스를 생성할 때 필요한 설정을 담고 잇는 설계도
- 어떤 AMI(이미지)로 만들지
- 인스턴스 타입 (t3.micro등)
- 키 페어, 보안 그룹
- UserData 스크립트 (초기 셋팅 자동화)

Auto Scaling Group (ASG)
- 인스턴스를 묶어서 관리하는 단위
- 최소/ 최대/ 원하는 (Desired) dlstmxjstm tn tjfwjd
- 실제 인스턴스 수를 계속 모니터링하고 자동 조절
- Availavility Zone 간 분산 가능



Scaling Policy (스케일링 정책)
- 언제, 어떻게 서버 수를 조절할지에 대한 규칙 
- Target Tracking: 평균 CUP 60% 유지처럼 목표 설정
- Step Scaling: CPU 70% ~ 80% -> +1대, 80% 이상 -> +2대
- Scheduled Scaling: 특정 시간에 확장 (ex. 매일오후 6시)

CloudWatch
- 지표를 감시하다가 스케일링 정책을 실행하는 역할
- CPU 사용률, 네트워크 트래픽, 메모리 등 모니터링
- 조건 충족 시 Scaling Policy 트리거
- 실시간 알람 + 로그 기록 가능


Auto Scaling Group (ASG) 설정 값


ELB: AWS에서 제공하는 트래픽 분산 서비스
- ELB는 들어오는 어플리케이션 트래픽을 Amazon 인스텐스, 컨테이너, ip 주소, 람다 함수와 같은 여러 대상에 자동 분산 시킴
- ELB는 단일 가용영역, 여러 가용 영역에서 다양한 어플리케이션 부하를 처리 가능
- ELB에서 제공하는 3가지 로드밸런서는 모두 어플리케이션이 내 결합성에 필요한 고가용성, 자동 확장/ 축소,
강력한 보안을 갖추고 있음

특징
- 다수의 서비스에 트래픽을 분산 시켜주는 서비스
- Health Check: 직접 트래픽을 발생시켜 instance가 살아있는지 체크
- Autoscaling과 연동 가능
- 여러 가용영역에 분산 가능
- 지속적으로 IP 주소가 바뀌며 IP 고정 불가능: 항상 도메인 기반으로 사용
-총 3가지 종류
Application, Network, Classic Load Balancer를 제공

핵심: ELB는 트래픽을 효율적으로 관리하고, 서비스의 안정성과 확장성을 높이는 데 중요한 역할을 합니다. IP 주소는 고정되지 않으므로 도메인 기반으로 사용해야 합니다.

종류
Application Load Balancer (ALB): 똑똑함
- 트래픽 내용을 분석해서 특정 서버로 보낼 수 있습니다.
- 예시: image.test.com 요청은 이미지 서버로, web.test.com 요청은 웹 서버로 분리합니다.
Network Load Balancer (NLB): 빠름
- TCP 기반으로 매우 빠른 트래픽 분산이 가능합니다.
- 고정 IP 주소(Elastic IP)를 할당할 수 있습니다.
Classic Load Balancer (CLB): 옛날 방식
- 현재는 잘 사용되지 않습니다.

핵심: ALB는 똑똑하게 트래픽을 분류하고, NLB는 매우 빠른 속도로 트래픽을 처리합니다. CLB는 이전 세대 로드 밸런서입니다

ALB
- 타겟 그룹: ALB가 트래픽을 분산시킬 대상(Target)을 논리적으로 묶어높은 그룹
- 타겟 그룹 기준으로 요청 분배
- ec2 인스턴스, ip주소, Lambda 함수, ELB 타겟 그룹 가능
- 역할
1. ALB : 라우팅 규식에 따라 타겟 그룹으로 요청 전달
2. 타겟 그룹은 내부에서 등록된 인스턴스 중 헬스체크를 통과한 대상에게 트래픽 전달
3. 타겟 그룹별로 포트, 프로토콜, 헬스체크 설정 가능

핵심: 타겟 그룹은 ALB가 실제 트래픽을 분산시킬 서버나 서비스의 집합이며, ALB의 라우팅 결정을 위한 중요한 단위입니다. 각 그룹별로 세부 설정을 할 수 있어 유연한 트래픽 관리가 가능합니다.
























