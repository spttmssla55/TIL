1. 반복문   // 10주차
for ( 변수 in 반복할 값) {
  실행할 코드
}

코드 :
for (i in 1:length(peach)) {
  if(peach[i] >= 200){
    colors = c(colors, 'red')
  } else if (peach[i] >= 180){
    colors = c(colors, 'yellow')
  } else {
    colors = c(colors, 'green')
  }
}

반드시 있어야 하는 인수
    for                  반복문을 시작하는 키워드
(변수 in 값)             반복할 대상을 지정하는 부분
    {}                   반복할 코드 블록을 묶는 부분 (한 줄이면 생략 가능하지만 보통 사용함)


-----------------------------------------
2. 결측치 확인 및 제거    // 12주차
df = data.frame(gender = c('M', 'F', NA, 'M', 'F'), score = c(5, 4, 3, 4, NA))
is.na(df)                                # 결측치 확인
filter(!is.na(score))                    # 결측치 제거
na.omit(df)                              # 결측치가 하나라도 있으면 제거
mean(df$score, na.rm = T)                # 결측치 제외 후 평균 계산

in 사용 :
out$gender = ifelse(out$gender %in% c(1,2), out$gender, NA)
-> 값이 1, 2 중 하나인 경우만 남기고 나머지는 NA로 바꾸는 코드


13주차 // 부분 결측치
df <- data.frame(x = c(1, NA, 3))
df[!is.na(df$x), ]  # NA 제거


-----------------------------------------
3. 이상치 확인 및 제거 (차트 포함)
out = data.frame(gender = c(1, 2, 1, 2, 2, 1), score = c(5, 4, 3, 4, 2, 6))
out$gender = iselse(out$gender %in% c(1, 2), out$gender, NA)
out$score = iselse(out$score > 5, NA, out$score)

- 통계적 기준으로 이상치 제거 (boxplot 사용)
boxplot(mpg$hwy)                # 이상치 시각화
boxplot(mpg$hwy)$stats          # 상자 수치 확인
mpg$hwy = ifelse(mpg$hwy < 12 | mpg$hwy > 37, NA, mpg$hwy)

---------------------------
4. dplyr 패키지 사용법   

filter()        # 조건에 맞는 행 선택
summarise()     # 요약
group_by()      # 그룹별 작업
mutate()        # 새로운 변수 추가 (코드엔 없음)
%>%             # 파이프 연산자


df %>% 
  filter(!is.na(score)) %>% 
  summarise(mean_score = mean(score))

mpg %>% 
  filter(!is.na(hwy)) %>% 
  group_by(drv) %>% 
  summarise(mean_hwy = mean(hwy))

13주차
arrange(): 정렬

filter(): 조건 필터링

transform()은 plyr이지만, dplyr 함수도 병행 사용됨

-----------------------------------------
5. barplot + ggplot2
ggplot(데이터프레임, aes(x=막대의 기준, y=막대의 높이)) + geom_bar(stat='identity')

aes() : 그래프에 사용할 데이터 매핑을 지정
geom_bar(stat = 'identity') : 주어진 y값 그대로 막대 높이로 사용
stat = 'count' -> 빈도수를 셈, 점수를 그대로 표현하려면 itentity를 사용

ggplot(kor, aes(x = 이름, y = 점수)) + geom_bar(stat = 'identity) : 이름별 점수를 막대그래프로 표현
stat = 'identuty' 이므로 점수 자체가 막대의 높이로 사용


gg1 = ggplot(kor, aes(x = 이름, y = 점수)) + 
  geom_bar(stat = 'identity', color = 'red', fill='green') 
                                            color = 'red' -> 막대 테두리를 빨간색
                                            fill = 'green' -> 막대 내부를 초록색으로 채움



gg1 + theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1, colour = 'blue', size = 8))
    axis.text.x -> x축 라벨 스타일 조정
    angle = 45 -> 글자 기울이기
    hjust, vjust -> 위치 조정
    colour, size -> 색과 크기 설정



누적 막대그래프 (과목별 점수)
gg2 = ggplot(skem3, aes(x=이름, y=점수, fill=과목)) + 
  geom_bar(stat='identity', position = position_stack(reverse = TRUE)) +
  geom_text(aes(y = label, label = paste(점수, '점')), size = 4) +
  guides(fill = guide_legend(reverse = TRUE))

fill = 과목 -> 과목별로 색상 분리
position_stack(reverse - TRUE) -> 아래서 위로 과목 순서를 뒤집음
geom_text() -> 각 막대 내부에 점수 텍스트 추가
label = cumsum(점수) - 0.5 * 점수 -> 텍스트가 막대 중간에 위치하도록 조정


X축 텍스트 꾸미기 (45도 회전 등
gg2 + theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1, color = 'black', size = 8))


★stat = 'identity' 사용 이유★
geom_bar() 원래는 빈도수를 세는 용도로 사용 됨, 하지만 점수라는 정확한 수치 데이터를 막대 길이로 표현해야 하므로 사용



★ 정리 ★
1. 기본 막대 그래프 // geom_bar(stat = 'identity') -> 점수를 그대로 y축 높이로 사용
2. 누적 막대그래프  // fill = 과목, position_stack() -> 과목별 점수 누적 표현
3. 텍스트 라벨      // geom_text(label = ...) -> 막대 위 점수 표시
4. 시각적 꾸미기    // theme(axis.text.x = ...), color, fill 등  -> 라벨 각도, 생상 등 조정



| 항목     | `barplot()` (base R) | `ggplot2::geom_bar()` (ggplot2)              |
| ------ | -------------------- | -------------------------------------------- |
| 패키지    | 기본 R (base)          | `ggplot2` 패키지 필요                             |
| 목적     | 빠르게 막대그래프 그리기        | 커스터마이징 가능하고 예쁜 그래프 그리기                       |
| 데이터 형식 | 주로 벡터나 행렬            | 데이터프레임                                       |
| 기본 동작  | 수치를 y축으로 직접 사용       | 기본은 빈도수 (count), 수치 사용시 `stat="identity"` 필요 |
| 커스터마이징 | 상대적으로 불편             | 매우 유연하고 세련됨                                  |
| 문법 스타일 | 함수 중심                | **문법 체인(+)** 기반 그래머 오브 그래픽스                  |









